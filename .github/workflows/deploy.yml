name: CI/CD Pipeline

on:
  push:
    branches:
      - master  # master 브랜치에 Push될 때 실행

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Clear Docker Cache
        run: docker builder prune --force

      # 1. 소스코드 체크아웃
      - name: Checkout code
        uses: actions/checkout@v3

      # 2. Docker Buildx 설정
      - uses: docker/setup-buildx-action@v3

      # 3. Docker Hub 로그인
      - uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Inject application.yml
        run: |
          mkdir -p src/main/resources
          echo "${{ secrets.APPLICATION_YML }}" > src/main/resources/application.yml

      # 4. Backend Docker 빌드 및 Push
      - name: Build and Push Backend Image
        uses: docker/build-push-action@v3
        with:
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/${{ github.event.repository.name }}-backend:latest
          context: ./backend
          file: ./backend/Dockerfile

      # 5. Frontend Docker 빌드 및 Push
      - name: Build and Push Frontend Image
        uses: docker/build-push-action@v4
        with:
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/${{ github.event.repository.name }}-frontend:latest
          context: ./frontend
          file: ./frontend/Dockerfile

      - name: Build and Push MySQL Image
        uses: docker/build-push-action@v3
        with:
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/${{ github.event.repository.name }}-mysql:latest
          context: ./mysql
          file: ./mysql/Dockerfile

      - name: Deploy to Server with Updated docker-compose.yml
        uses: appleboy/ssh-action@v0.1.8
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_KEY }}
          script: |
            mkdir -p /home/ubuntu/flolink-deploy
            echo '
              services:
                mysql:
                  container_name: mysql
                  image: gus9300/flolink-deploy-mysql:latest
                  ports:
                    - "3306:3306"
                  environment:
                    MYSQL_DATABASE: flolink
                    MYSQL_USER: gus9300
                    MYSQL_PASSWORD: tvxq1226@
                    MYSQL_ROOT_PASSWORD: rootpassword
                  healthcheck:
                    test: ["CMD-SHELL", "mysqladmin ping -h localhost -u gus9300 -ptvxq1226@ || exit 1"]
                    interval: 10s
                    timeout: 5s
                    retries: 3
                  volumes:
                    - mysql-data:/var/lib/mysql
                  restart: always

                backend:
                  image: gus9300/flolink-deploy-backend:latest
                  ports:
                    - "8080:8080"
                  environment:
                    SPRING_DATASOURCE_URL: jdbc:mysql://mysql:3306/flolink
                    SPRING_DATASOURCE_USERNAME: gus9300
                    SPRING_DATASOURCE_PASSWORD: tvxq1226@
                  depends_on:
                    - mysql

                frontend:
                  image: gus9300/flolink-deploy-frontend:latest
                  ports:
                    - "80:80"
                  environment:
                    REACT_APP_BACKEND_URL: http://backend:8080

              volumes:
                mysql-data:
                  driver: local
            ' > /home/ubuntu/flolink-deploy/docker-compose.yml
            docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
            cd /home/ubuntu/flolink-deploy
            docker-compose down
            docker-compose pull
            docker-compose up -d
